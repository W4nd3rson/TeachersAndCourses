// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeatchersAndCourses.DataAccess.Context;

namespace DataAccess.Migrations
{
    [DbContext(typeof(TeatchersAndCoursesContext))]
    partial class TeatchersAndCoursesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Domain.Models.CoursesUniversity", b =>
                {
                    b.Property<int>("CourseId");

                    b.Property<int>("UniversityId");

                    b.HasKey("CourseId", "UniversityId");

                    b.HasIndex("UniversityId");

                    b.ToTable("CoursesUniversity");
                });

            modelBuilder.Entity("Domain.Models.Teatcher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Teatcher");
                });

            modelBuilder.Entity("Domain.Models.TeatcherCourse", b =>
                {
                    b.Property<int>("TeatcherId");

                    b.Property<int>("CourseId");

                    b.Property<int?>("UniversityId");

                    b.HasKey("TeatcherId", "CourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UniversityId");

                    b.ToTable("TeatcherCourse");
                });

            modelBuilder.Entity("Domain.Models.TeatchersUniversity", b =>
                {
                    b.Property<int>("TeatcherId");

                    b.Property<int>("UniversityId");

                    b.HasKey("TeatcherId", "UniversityId");

                    b.HasIndex("UniversityId");

                    b.ToTable("TeatchersUniversity");
                });

            modelBuilder.Entity("Domain.Models.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("University");
                });

            modelBuilder.Entity("Domain.Models.CoursesUniversity", b =>
                {
                    b.HasOne("Domain.Models.Course", "Course")
                        .WithMany("CoursesUniversities")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.University", "University")
                        .WithMany("CoursesUniversities")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.TeatcherCourse", b =>
                {
                    b.HasOne("Domain.Models.Course", "Course")
                        .WithMany("TeatcherCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Teatcher", "Teatcher")
                        .WithMany("TeatcherCourses")
                        .HasForeignKey("TeatcherId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.University")
                        .WithMany("TeatcherCourses")
                        .HasForeignKey("UniversityId");
                });

            modelBuilder.Entity("Domain.Models.TeatchersUniversity", b =>
                {
                    b.HasOne("Domain.Models.Teatcher", "Teatcher")
                        .WithMany("TeatchersUniversities")
                        .HasForeignKey("TeatcherId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
